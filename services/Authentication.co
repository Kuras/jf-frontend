angular.module('jf')
.service 'Authentication', (AjaxAction, Session, Cookie, $location)->

	# @isLoggedInDfd = $.Deferred()

	# Sprawdza czy istnieje w URLu parametr o nazwie cookieName
	# -> Jesli tak to go zapisuje jako cookie.
	@checkUrlCookie = (cookieName)~>
		cookieValue = $location.search()[cookieName]
		if cookieValue
			console.log "AUTHENTICATION", "Setting authentication cookie #cookieName=#cookieValue"
			Cookie.create cookieName, cookieValue, 1

			# TODO: nie dziala, powinno usuwac z historii
			$location.replace().search(cookieName, null)

	@discoverLoginState = ~>
		dfd = $.Deferred()
		AjaxAction("is_logged_in")
		.withRawResponse()
		.done (response)~>
			if response.is_logged_in
				Session.login(response.username)
				dfd.resolve(response.username)
				# @isLoggedInDfd.resolve(response.username)
			else
				# @isLoggedInDfd.reject()
				dfd.reject()
		dfd

	@authenticate = (credentials)->
		dfd = $.Deferred()
		AjaxAction()
		.post("login")
		.withData(credentials)
		.done ->
			Session.login(credentials.username)
			console.log "Session (Authentication)", Session.getUsername()
			dfd.resolve "OK"
		.fail (error)->
			dfd.reject error

		dfd

	@logout = ->
		dfd = $.Deferred()
		AjaxAction().post("logout")
		.done ->
			Session.logout!
			Cookie.erase("JSESSIONID")
			# @isLoggedInDfd := $.Deferred()
			dfd.resolve "OK"
		.fail (error)->
			alert arguments
			dfd.reject error

		dfd

	return this